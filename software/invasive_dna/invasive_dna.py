import Levenshtein
from PIL import Image
from google.cloud import vision
import os
import glob


invasive_carps=["""CTTCTGGTAGTACCTATATGGTTCAGTACATATTATGTATTATGTTACCTAATGTACTAATACCTATATATG
TATTATCACCATTAATTTATTTTAACCTTAAAGCAAGTACTAACGTTTAAAAACGTACATAAACCAAAAT
ATTAAGATTCATAAATAAATTATCTTAACTTAAATAAACAGATTATTCCACTAACAATTGATTCTCAAATT
TATTACTGAATTATTAACTAAAATCTAACTCAAGTATATTATTAAAGTAAGAGACCACCTACTTATTTATA
TTAAGGTATTATATTCATGATAAGATCAAGGACAATAACAGTGGGGGTGGCGCAAAATGAACTATTAC
TTGCATCTGGTTTGGAATCTCACGGACATGGCTACAAAATTCCACCCCCGTTACATTATAACTGGCATA
TGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGG
GTTCTCCTTTTGGTTTCCTTTCACCTTGCATATCAGAGTGCAAGCTCAAATAGTAAAATAAGGTTGAAC
ATATTCCTTGCTTGTGTTAAAGTAAGTTAATTATTAAAAGACATAACTTAAGAATTACATATTTCTCACTC
AAGTGCATAACATATTCATTCTTTCTTCAACTTACCCCTATATATATGCCCCCCCTTTTGGCTTCTGCGC
GACAAACCCCCCTACCCCCTACGCTCAGCAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAA
GGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGGGTTAGCTATCCGCATTATATATATATATATAC
ATACACATCACATCAATTTACCACATAATTCCCCAAACATTGACCTAAAAACCCCTATTAAATTTATAGG
ACATGCCCCAATGCTAAAAAGTCCAACATTATATAATGCTAG""" , #Bighead Carp
"""TCTTCTGATATAACCTATATGGTTTAATACATATATGTATTATATTACATAATGCATTAGTACTAGTATATG
TATTATCACCATTCATTTATATTAACCTTAAAGCAAGTACTAACGTTTAAGACGTACATAAACCAAATAT
TTAAAATTCACAATTAATTTATTTAAACCTGAGAAAAGAGTTGTTCCACTATAATTGGTTCTCAAATATTT
CCTTGAAATATTAACTTCTATTTAATTTAACTATATTAATGTAGTAAGAAACCACCTACTGGTTTATATTA
AGGTATTCTATTCATGATAAGATCAGGGACAATAATCGTGGGGGTGGCGCAGAATGAACTATTACTTG
CATTTGGCTTGGAATCTCACGGACATGACTGTAAAATTCCACCCTCCATACATTATATCTGGCATCTGG
TTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTC
TCCTTTTGGTTACCTTTCATCTTGCATATCAGAGTGCAGGCTCAAATGATAAATTAAGGTTGAACATATT
CCTTGCTTAAGTTAAAGTAGGTTAATTATTGAAAGACATAACTTAAGAATTACATATTTTTAATTCAAGT
GCATAACATATTATTCTTTCTTCAACTTACCCTTATATATATGCCCCCCTTTCGGTTTCTGCGCGACAAA
CCCCCTTACCCCCTACGCTCAACAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGA
GAACGTGCAAGCTAACAAGTTGAAATATGAGTTAGCTATCCGCATTATATATATATATATACATACACAT
CGCGTCAATTCGCCACATAATTCCCCAAATATAAACCTAAAAATTCCTATTAAATTTTAAGGGGCACGC
CCCAATGCTAAAAAGTCCAACATTAAATAACGCTAGCGTAG""", #Silver Carp
"""GACATTGCTACCCTCTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTC
ATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGATCAAATTTATAATGTTATTGTCACT
GCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGGTTTGGAAATTGACTCG
TACCATTAATAATTGGAGCACCCGACATAGCATTCCCACGAATAAACAACATGAGTTTCTGACTTCTAC
CCCCTTCTTTCCTCCTACTATTAGCCTCTTCTGGTGTTGAGGCCGGAGCTGGAACAGGGTGAACAGTT
TACCCACCACTCGCAGGCAATCTTGCCCACGCAGGAGCATCCGTAGACCTAACAATTTTCTCACTCCA
CCTGGCAGGTGTGTCATCAATTTTAGGGGCAATTAATTTTATTACTACAACCATTAACATGAAACCACC
AGCCATCTCCCAATACCAAACACCTCTCTTCGTTTGAGCTGTACTTGTAACAGCTGTACTCCTTCTTCTA
TCTCTACCAGTTCTAGCCGCCGGAATTACAATACTCCTAACAGACCGTAATCTTAACACTACATTCTTT
GACCCGGCGGGAGGAGGAGACCCAATTCTTTATCAACACTTATTCTGATTCTTTGGTCACCCGGAAGT
TTATATTCTTATTTTACCCGGATTTGGAATCATTTCACATGTTGTAGCCTACTATGCAGGTAAAAAAGAA
CCATTCGGTTATATAGGAATAGTCTGAGCTATAATGGCTATTGGTCTTCTAGGGTTTATTGTATGAGCCC
ACCATATGTTTACTGTTGGGATAGACGTAGACACTCGTGCATATTTTACATCCGCAACGATAATTATTG
CTATCCCAACAGGTGTAAAAGTATTTAGCTGACTAGCCACAC""", #Grass Carp
"""GACATTGGTACCCTTTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTC
ATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGACCAAATTTATAATGTTATTGTCAC
TGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGATTCGGAAACTGACTC
GTACCGCTAATAATTGGAGCACCTGATATAGCATTCCCCCGAATGAATAACATAAGCTTCTGACTTCTG
CCCCCATCTTTCCTCCTACTACTAGCCTCTTCTGGTGTTGAAGCTGGGGCTGGGACAGGGTGAACAGT
CTACCCACCACTCGCAGGCAATCTTGCACACGCAGGAGCATCTGTAGATCTAACAATCTTTTCGCTAC
ACCTGGCAGGTGTGTCATCAATTTTAGGAGCGATTAACTTCATCACTACAACTATCAACATAAAACCCC
CAGCCATTTCTCAATACCAAACACCTCTCTTTGTCTGAGCTGTGCTAGTAACAGCCGTACTCCTTCTCC
TATCCCTACCAGTCCTAGCTGCTGGAATTACAATACTCCTTACAGACCGTAACCTTAACACCACGTTCT
TTGACCCAGCAGGCGGAGGAGACCCAATCCTATATCAACACCTGTTCTGATTCTTCGGCCACCCAGA
AGTTTACATTCTTATTTTACCCGGGTTTGGGATCATTTCACACGTCGTAGCCTACTACGCGGGCAAAAA
AGAACCATTTGGTTACATAGGAATGGTTTGAGCCATGATGGCTATTGGTCTCCTAGGATTTATTGTGTG
AGCCCACCACATGTTTACTGTCGGAATAGACGTAGACACTCGTGCATACTTTACATCCGCAACAATAA
TTATTGCTATCCCAACAGGTGTAAAAGTGTTTAGCTGACTAGCC"""#Black Carp
]

# ✅ Set your service account key
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
key_path = os.path.join(BASE_DIR, "mate-rov-41442644ab80.json")
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = key_path


species_names = ["Bighead Carp", "Silver Carp", "Grass Carp", "Black Carp"]
invasive_carps = [''.join(seq.split()) for seq in invasive_carps]

print("🧬 DNA Analysis Started")

# ✅ Load images from folder

# Construct the full path to the samples directory
samples_path = os.path.join(BASE_DIR, "samples", "sample*.jpeg")
sample_images = sorted(glob.glob(samples_path))

# ✅ Create Vision API client
client = vision.ImageAnnotatorClient()

# 🔁 Process each image
for i, image_path in enumerate(sample_images, start=1):
    print(f"\n📸 Sample {i}: {image_path}")

    with open(image_path, "rb") as img_file:
        content = img_file.read()

    image = vision.Image(content=content)
    response = client.text_detection(image=image)
    texts = response.text_annotations

    if not texts:
        print("⚠️ No text detected.")
        continue

    # 🧹 Clean the extracted DNA (keep only CGAT)
    extracted_raw = texts[0].description.upper()
    extracted_dna = ''.join(c for c in extracted_raw if c in "CGAT")

    

    # 🧠 Match against known DNA
    best_score = 0.0
    best_match = None

    for j, ref_dna in enumerate(invasive_carps):
        score = 1 - Levenshtein.distance(extracted_dna, ref_dna) / max(len(ref_dna), 1)
        if score > best_score:
            best_score = score
            best_match = species_names[j]

    # ✅ Output result
    if best_score >= 0.90:
        print(f"✅ INVASIVE! Match: {best_match} ({best_score:.2%})")
    else:
        print(f"❌ Not invasive. Closest: {best_match} ({best_score:.2%})")

print("\n✅ Analysis Complete")
