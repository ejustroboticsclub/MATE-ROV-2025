import os
import glob
import google.generativeai as genai
import Levenshtein
from PIL import Image

#  Authenticate with Gemini API
genai.configure(api_key="AIzaSyDvFcmpQIASuu_rRxkIiOkdCW5iaJMP2fM")  
invasive_carps=["""CTTCTGGTAGTACCTATATGGTTCAGTACATATTATGTATTATGTTACCTAATGTACTAATACCTATATATG
TATTATCACCATTAATTTATTTTAACCTTAAAGCAAGTACTAACGTTTAAAAACGTACATAAACCAAAAT
ATTAAGATTCATAAATAAATTATCTTAACTTAAATAAACAGATTATTCCACTAACAATTGATTCTCAAATT
TATTACTGAATTATTAACTAAAATCTAACTCAAGTATATTATTAAAGTAAGAGACCACCTACTTATTTATA
TTAAGGTATTATATTCATGATAAGATCAAGGACAATAACAGTGGGGGTGGCGCAAAATGAACTATTAC
TTGCATCTGGTTTGGAATCTCACGGACATGGCTACAAAATTCCACCCCCGTTACATTATAACTGGCATA
TGGTTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGG
GTTCTCCTTTTGGTTTCCTTTCACCTTGCATATCAGAGTGCAAGCTCAAATAGTAAAATAAGGTTGAAC
ATATTCCTTGCTTGTGTTAAAGTAAGTTAATTATTAAAAGACATAACTTAAGAATTACATATTTCTCACTC
AAGTGCATAACATATTCATTCTTTCTTCAACTTACCCCTATATATATGCCCCCCCTTTTGGCTTCTGCGC
GACAAACCCCCCTACCCCCTACGCTCAGCAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAA
GGTTCGAGAACGTGCAAGCTAACAAGTTGAAATATGGGTTAGCTATCCGCATTATATATATATATATAC
ATACACATCACATCAATTTACCACATAATTCCCCAAACATTGACCTAAAAACCCCTATTAAATTTATAGG
ACATGCCCCAATGCTAAAAAGTCCAACATTATATAATGCTAG""" , #Bighead Carp
"""TCTTCTGATATAACCTATATGGTTTAATACATATATGTATTATATTACATAATGCATTAGTACTAGTATATG
TATTATCACCATTCATTTATATTAACCTTAAAGCAAGTACTAACGTTTAAGACGTACATAAACCAAATAT
TTAAAATTCACAATTAATTTATTTAAACCTGAGAAAAGAGTTGTTCCACTATAATTGGTTCTCAAATATTT
CCTTGAAATATTAACTTCTATTTAATTTAACTATATTAATGTAGTAAGAAACCACCTACTGGTTTATATTA
AGGTATTCTATTCATGATAAGATCAGGGACAATAATCGTGGGGGTGGCGCAGAATGAACTATTACTTG
CATTTGGCTTGGAATCTCACGGACATGACTGTAAAATTCCACCCTCCATACATTATATCTGGCATCTGG
TTAAATGATGTGAGTACATACTCCTCATTAACCCCACATGCCGAGCATTCTTTTATATGCATAGGGGTTC
TCCTTTTGGTTACCTTTCATCTTGCATATCAGAGTGCAGGCTCAAATGATAAATTAAGGTTGAACATATT
CCTTGCTTAAGTTAAAGTAGGTTAATTATTGAAAGACATAACTTAAGAATTACATATTTTTAATTCAAGT
GCATAACATATTATTCTTTCTTCAACTTACCCTTATATATATGCCCCCCTTTCGGTTTCTGCGCGACAAA
CCCCCTTACCCCCTACGCTCAACAAATCCTGTTATCCTTGTCAAACCCCAAAACCAAGGAAGGTTCGA
GAACGTGCAAGCTAACAAGTTGAAATATGAGTTAGCTATCCGCATTATATATATATATATACATACACAT
CGCGTCAATTCGCCACATAATTCCCCAAATATAAACCTAAAAATTCCTATTAAATTTTAAGGGGCACGC
CCCAATGCTAAAAAGTCCAACATTAAATAACGCTAGCGTAG""", #Silver Carp
"""GACATTGCTACCCTCTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTC
ATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGATCAAATTTATAATGTTATTGTCACT
GCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGGTTTGGAAATTGACTCG
TACCATTAATAATTGGAGCACCCGACATAGCATTCCCACGAATAAACAACATGAGTTTCTGACTTCTAC
CCCCTTCTTTCCTCCTACTATTAGCCTCTTCTGGTGTTGAGGCCGGAGCTGGAACAGGGTGAACAGTT
TACCCACCACTCGCAGGCAATCTTGCCCACGCAGGAGCATCCGTAGACCTAACAATTTTCTCACTCCA
CCTGGCAGGTGTGTCATCAATTTTAGGGGCAATTAATTTTATTACTACAACCATTAACATGAAACCACC
AGCCATCTCCCAATACCAAACACCTCTCTTCGTTTGAGCTGTACTTGTAACAGCTGTACTCCTTCTTCTA
TCTCTACCAGTTCTAGCCGCCGGAATTACAATACTCCTAACAGACCGTAATCTTAACACTACATTCTTT
GACCCGGCGGGAGGAGGAGACCCAATTCTTTATCAACACTTATTCTGATTCTTTGGTCACCCGGAAGT
TTATATTCTTATTTTACCCGGATTTGGAATCATTTCACATGTTGTAGCCTACTATGCAGGTAAAAAAGAA
CCATTCGGTTATATAGGAATAGTCTGAGCTATAATGGCTATTGGTCTTCTAGGGTTTATTGTATGAGCCC
ACCATATGTTTACTGTTGGGATAGACGTAGACACTCGTGCATATTTTACATCCGCAACGATAATTATTG
CTATCCCAACAGGTGTAAAAGTATTTAGCTGACTAGCCACAC""", #Grass Carp
"""GACATTGGTACCCTTTATCTTGTATTTGGTGCCTGAGCCGGAATAGTGGGAACCGCTCTAAGCCTTCTC
ATTCGAGCCGAACTAAGCCAACCCGGATCACTTCTGGGCGATGACCAAATTTATAATGTTATTGTCAC
TGCCCATGCCTTCGTAATAATTTTCTTTATAGTAATACCAATTCTTATTGGAGGATTCGGAAACTGACTC
GTACCGCTAATAATTGGAGCACCTGATATAGCATTCCCCCGAATGAATAACATAAGCTTCTGACTTCTG
CCCCCATCTTTCCTCCTACTACTAGCCTCTTCTGGTGTTGAAGCTGGGGCTGGGACAGGGTGAACAGT
CTACCCACCACTCGCAGGCAATCTTGCACACGCAGGAGCATCTGTAGATCTAACAATCTTTTCGCTAC
ACCTGGCAGGTGTGTCATCAATTTTAGGAGCGATTAACTTCATCACTACAACTATCAACATAAAACCCC
CAGCCATTTCTCAATACCAAACACCTCTCTTTGTCTGAGCTGTGCTAGTAACAGCCGTACTCCTTCTCC
TATCCCTACCAGTCCTAGCTGCTGGAATTACAATACTCCTTACAGACCGTAACCTTAACACCACGTTCT
TTGACCCAGCAGGCGGAGGAGACCCAATCCTATATCAACACCTGTTCTGATTCTTCGGCCACCCAGA
AGTTTACATTCTTATTTTACCCGGGTTTGGGATCATTTCACACGTCGTAGCCTACTACGCGGGCAAAAA
AGAACCATTTGGTTACATAGGAATGGTTTGAGCCATGATGGCTATTGGTCTCCTAGGATTTATTGTGTG
AGCCCACCACATGTTTACTGTCGGAATAGACGTAGACACTCGTGCATACTTTACATCCGCAACAATAA
TTATTGCTATCCCAACAGGTGTAAAAGTGTTTAGCTGACTAGCC"""#Black Carp
]

species_names = ["Bighead Carp", "Silver Carp", "Grass Carp", "Black Carp"]
invasive_carps = [''.join(seq.split()) for seq in invasive_carps]

# Load all images from 'samples/' directory
sample_images = sorted(glob.glob("samples/sample*.jpeg"))

# Load Gemini Vision model
model = genai.GenerativeModel("gemini-2.0-flash")

# Process each image sample
for i, image_path in enumerate(sample_images, start=1):
    print(f"\nðŸ“¸Sample {i}: {image_path}")

    # Load image using PIL
    image = Image.open(image_path)

    # Send image + prompt to Gemini API
    response = model.generate_content(
        ["Extract this text. Your only characters are CGAT.", image],
        stream=False
    )

    # Clean the extracted text: keep only A, T, G, C
    raw_text = response.text.strip().upper()
    extracted_dna = ''.join(c for c in raw_text if c in "CGAT")

    #  Match against invasive carp sequences
    best_similarity = 0
    best_species = None

    for j, ref_dna in enumerate(invasive_carps):
        similarity = 1 - Levenshtein.distance(extracted_dna, ref_dna) / max(len(ref_dna), 1)
        if similarity > best_similarity:
            best_similarity = similarity
            best_species = species_names[j]

    # Output results
    if best_similarity >= 0.90:
        print(f" Sample {i} is INVASIVE ({best_similarity:.2%} match with {best_species})")
    else:
        print(f"Sample {i} is NOT invasive (best match: {best_species}, similarity: {best_similarity:.2%})")

